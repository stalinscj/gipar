/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Conexiones.ConexionMYSQL;
import Esencial.PuntoFijo;
import Esencial.PuntoVario;
import Esencial.Reunion;
import Esencial.Usuario;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.JOptionPane;

/**
 * Clase que representa una ventana a trav√©s de la cual un usuario puede gestionar su cuenta o gestionar el inicio de una partida.
 * @author Stalin
 */
public class GestionarReuniones extends javax.swing.JFrame {
    
    public static Usuario usuarioActual;
    private Fondo  imagenFondo;
    public static String hostname="";
    ArrayList<Reunion> reuniones;
    ArrayList<String> correos;

    /**
     * Creates new form MenuSala
     */
    public GestionarReuniones() {
        imagenFondo = new Fondo("/Imagenes/fondoSala.jpg");
        
        
        
        initComponents();
        
        
        this.setSize(imagenFondo.getWidth(),imagenFondo.getHeight());
        
        fondo.add(imagenFondo);
        fondo.setOpaque(false);

        this.setLocationRelativeTo(null);
        reuniones = new ArrayList<Reunion>();
        correos = new ArrayList<String>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        btnAgregarReunion = new javax.swing.JButton();
        btnBuscarReunion = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        btnModificarAsistencia = new javax.swing.JButton();
        btnAgregarPuntos = new javax.swing.JButton();
        btnEliminarReunion = new javax.swing.JButton();
        btnEnviarAgenda = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fondo.setBackground(new java.awt.Color(0, 153, 0));

        btnAgregarReunion.setText("Agregar Reunion");
        btnAgregarReunion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarReunionMouseClicked(evt);
            }
        });

        btnBuscarReunion.setText("Buscar Reunion");
        btnBuscarReunion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBuscarReunionMouseClicked(evt);
            }
        });
        btnBuscarReunion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarReunionActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverMouseClicked(evt);
            }
        });

        btnModificarAsistencia.setText("Modificar Asistencia");
        btnModificarAsistencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarAsistenciaMouseClicked(evt);
            }
        });

        btnAgregarPuntos.setText("Agregar Puntos");
        btnAgregarPuntos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarPuntosMouseClicked(evt);
            }
        });

        btnEliminarReunion.setText("Eliminar Reunion");
        btnEliminarReunion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarReunionMouseClicked(evt);
            }
        });

        btnEnviarAgenda.setText("EnviarAgenda");
        btnEnviarAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEnviarAgendaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fondoLayout = new javax.swing.GroupLayout(fondo);
        fondo.setLayout(fondoLayout);
        fondoLayout.setHorizontalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarReunion, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregarPuntos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminarReunion)
                            .addComponent(btnBuscarReunion, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificarAsistencia)))
                    .addComponent(btnEnviarAgenda))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        fondoLayout.setVerticalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarReunion)
                    .addComponent(btnBuscarReunion)
                    .addComponent(btnModificarAsistencia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVolver)
                        .addContainerGap(101, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarPuntos)
                            .addComponent(btnEliminarReunion))
                        .addGap(18, 18, 18)
                        .addComponent(btnEnviarAgenda)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked

        String[] args=null;
        Sala.hostname = this.hostname;
        Sala.usuarioActual = this.usuarioActual;
        Sala.main(args);
        this.dispose();
    }//GEN-LAST:event_btnVolverMouseClicked

    private void btnAgregarReunionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarReunionMouseClicked
        
        String[] args = null;
        AgregarReunion.usuarioActual = this.usuarioActual;
        AgregarReunion.hostname = this.hostname;
        AgregarReunion.main(args);
        this.dispose();
        
    }//GEN-LAST:event_btnAgregarReunionMouseClicked

    private void btnBuscarReunionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarReunionMouseClicked
         
        String[] args = null;
        BuscarReunion.hostname = this.hostname;
        BuscarReunion.usuarioActual = this.usuarioActual;
        BuscarReunion.main(args);
        this.dispose();
    }//GEN-LAST:event_btnBuscarReunionMouseClicked

    private void btnBuscarReunionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarReunionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarReunionActionPerformed

    private void btnAgregarPuntosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarPuntosMouseClicked
        String[] args = null;
        AgregarPuntos.hostname = this.hostname;
        AgregarPuntos.usuarioActual = this.usuarioActual;
        AgregarPuntos.main(args);
        this.dispose();
    }//GEN-LAST:event_btnAgregarPuntosMouseClicked

    private void btnModificarAsistenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarAsistenciaMouseClicked
        String[] args = null;
        ModificarAsistencia.hostname = this.hostname;
        ModificarAsistencia.usuarioActual = this.usuarioActual;
        ModificarAsistencia.main(args);
        this.dispose();
    }//GEN-LAST:event_btnModificarAsistenciaMouseClicked

    private void btnEliminarReunionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarReunionMouseClicked
        String[] args = null;
        EliminarReunion.hostname = this.hostname;
        EliminarReunion.usuarioActual = this.usuarioActual;
        EliminarReunion.main(args);
        this.dispose();
    }//GEN-LAST:event_btnEliminarReunionMouseClicked

    private void btnEnviarAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEnviarAgendaMouseClicked
        cargarCorreos();
        cargarReuniones();
        enviarAgenda();
    }//GEN-LAST:event_btnEnviarAgendaMouseClicked

    
    public boolean cargarReuniones(){
        
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "SELECT * "
                            + "FROM reuniones INNER JOIN miembros ON reuniones.idMiembro=miembros.idMiembro "
                            + "ORDER BY fecha;";
           
        Reunion reunion = null;
        try {
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            while(RS.next()){
                reunion = new Reunion(RS.getString("fecha"),RS.getString("hora"),RS.getString("nombre"),RS.getString("idReunion"),new ArrayList<PuntoFijo>(),new ArrayList<PuntoVario>());
                cargarPuntosFijos(reunion);
                cargarPuntosVarios(reunion);
                reuniones.add(reunion);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
      
        return true;
    }
    
    public boolean cargarPuntosFijos(Reunion reunion){
        
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "SELECT * "
                            + "FROM puntos_fijos "
                            + "WHERE idReunion='"+reunion.getId()+"';";
           
        try {
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            while(RS.next()){
                
                reunion.getPuntosFijos().add(new PuntoFijo(RS.getString("nombre"), RS.getString("descripcion")));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
      
        return true;
    }
    
    public boolean cargarPuntosVarios(Reunion reunion){
        
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "SELECT * "
                            + "FROM puntos_varios INNER JOIN miembros ON puntos_varios.idResponsable=miembros.idMiembro "
                            + "WHERE idReunion='"+reunion.getId()+"';";
           
        try {
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            while(RS.next()){
                
                reunion.getPuntosVarios().add(new PuntoVario(RS.getString("puntosvarios.nombre"), RS.getString("descripcion"), RS.getString("miembros.nombre")));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
      
        return true;
    }
    
    
    public boolean cargarCorreos(){
        
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "SELECT correo FROM miembros;";
           
        int i=0;
        try {
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            while(RS.next()){
                correos.add(RS.getString("correo"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
      
        return true;
    }
    
    public void enviarAgenda(){
        int i,j,k,l;
        Reunion reunion = null;
        String mensaje="";
        
        for(i=0;i<reuniones.size();i++){
            
            reunion = reuniones.get(i);
            
            if(!reunionVieja(reunion)){
                mensaje = mensaje+"Fecha: "+reunion.getFecha()+"\nHora: "+reunion.getHora()+"\nCoordinador: "+reunion.getCoordinador()+"\n";
                for(j=0;j<reunion.getPuntosFijos().size();j++){
                    mensaje = mensaje+"Nombre Punto Fijo: "+reunion.getPuntosFijos().get(j).getNombre()
                                     +"\nDescripcion Punto Fijo: "+reunion.getPuntosFijos().get(j).getDescripcion()+"\n";
                }
                for(j=0;j<reunion.getPuntosVarios().size();j++){
                    mensaje = mensaje+"Nombre Punto Vario: "+reunion.getPuntosVarios().get(j).getNombre()
                                     +"\nResponsable Punto Vario: "+reunion.getPuntosVarios().get(j).getResponsable()
                                     +"\nDescripcion Punto Vario: "+reunion.getPuntosVarios().get(j).getDescripcion()+"\n";
                }
                mensaje=mensaje+"\n";
            }
            
        }
        
        for(j=0;j<correos.size();j++){
            enviarCorreo("JuegoUnoUneg@gmail.com","nziziaqnqesoneaf",correos.get(j) , "Agenda de Reuniones",mensaje, "", "");
        }
        
    }
    
    public boolean reunionVieja(Reunion reunion){
        
        String Sano,Smes,Sdia,Shora,fecha[];
        int ano,mes,dia,hora;
        fecha = reunion.getFecha().split("-");
        Sano = fecha[0];
        Smes = fecha[1];
        Sdia = fecha[2];
        Shora = reunion.getHora();
        
        ano = Integer.parseInt(Sano);
        mes = Integer.parseInt(Smes);
        dia = Integer.parseInt(Sdia);
        hora = Integer.parseInt(Shora);
        
        Calendar tiempo = new GregorianCalendar();
        
        if(ano<tiempo.get(Calendar.YEAR))
            return true;
        else
            if(ano>tiempo.get(Calendar.YEAR))
                return false;
            else
                if(mes<tiempo.get(Calendar.MONTH)+1)
                    return true;
                else
                    if(mes>tiempo.get(Calendar.MONTH)+1)
                        return false;
                    else
                        if(dia<tiempo.get(Calendar.DAY_OF_MONTH))
                            return true;
                        else
                            if(dia>tiempo.get(Calendar.DAY_OF_MONTH))
                                return false;
                            else
                                if(hora<tiempo.get(Calendar.HOUR_OF_DAY))
                                    return true;
                                else
                                    if(hora>=tiempo.get(Calendar.HOUR_OF_DAY))
                                        return false;
        
        return true;
    }
    
    public boolean enviarCorreo(String usuarioCorreo,String claveCorreo,String destinatario,String asunto, String mensaje, String rutaArchivo, String nombreArchivo){
        try
        {
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.setProperty("mail.smtp.starttls.enable", "true");
            props.setProperty("mail.smtp.port", "587");
            props.setProperty("mail.smtp.user", usuarioCorreo);
            props.setProperty("mail.smtp.auth", "true");

            Session session = Session.getDefaultInstance(props, null);
            BodyPart texto = new MimeBodyPart();
            texto.setText(mensaje);

            BodyPart adjunto = new MimeBodyPart();
            if (!rutaArchivo.equals("")){
                 adjunto.setDataHandler(
                    new DataHandler(new FileDataSource(rutaArchivo)));
                adjunto.setFileName(nombreArchivo);                
            }

            MimeMultipart multiParte = new MimeMultipart();
            multiParte.addBodyPart(texto);
            if (!rutaArchivo.equals("")){
                multiParte.addBodyPart(adjunto);
            }

            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(usuarioCorreo));
            message.addRecipient(
                Message.RecipientType.TO,
                new InternetAddress(destinatario));
                message.setSubject(asunto);
            message.setContent(multiParte);

            Transport t = session.getTransport("smtp");
            t.connect(usuarioCorreo, claveCorreo);
            t.sendMessage(message, message.getAllRecipients());
            t.close();
            return true;
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
            return false;
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionarReuniones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionarReuniones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionarReuniones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionarReuniones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionarReuniones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarPuntos;
    private javax.swing.JButton btnAgregarReunion;
    private javax.swing.JButton btnBuscarReunion;
    private javax.swing.JButton btnEliminarReunion;
    private javax.swing.JButton btnEnviarAgenda;
    private javax.swing.JButton btnModificarAsistencia;
    private javax.swing.JButton btnVolver;
    private javax.swing.JPanel fondo;
    // End of variables declaration//GEN-END:variables

    
}
