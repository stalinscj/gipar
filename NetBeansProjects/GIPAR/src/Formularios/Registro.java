/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template archivo, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Conexiones.ConexionMYSQL;
import Esencial.Imagen;
import Esencial.Usuario;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.commons.codec.digest.DigestUtils;

/**
 * Clase que representa un formulario en el cual un usuario ingresará sus datos para registrarse en el sistema.
 * @author Stalin
 */
public class Registro extends javax.swing.JFrame {
    
    private Fondo  imagenFondo;
    public static String origen="";
    public static String hostname="";
    public static Usuario usuarioActual;
    private File archivo;
    private String tipoDeImagen;
    private boolean cambiarImagen;
    private boolean cambiarClave;
    private int numFilas=0;
    private DefaultTableModel modelo;
    
    public Registro() {
  
        if(origen.equalsIgnoreCase("Login")){
            imagenFondo = new Fondo("/Imagenes/fondoRegistro.jpg");
        }else{
            imagenFondo = new Fondo("/Imagenes/fondoModificacion.jpg");
            cambiarImagen = false;
            cambiarClave = false;
        }
        
        archivo=null;
        tipoDeImagen="";
        
        initComponents();
        
        this.setSize(imagenFondo.getWidth(),imagenFondo.getHeight());
        
        fondo.add(imagenFondo);
        fondo.setOpaque(false);
        

        this.setLocationRelativeTo(null);
        this.setResizable(false);
        txtNombreImagen.setEditable(false);
        
        this.txtNombre.requestFocus();
        
        
        if(origen.equalsIgnoreCase("Sala")){
            cargarUsuario();
            txtClave1.setEditable(false);
            txtClave2.setEditable(false);
        }
        
        txtOcupacion.setEditable(false);
        txtAreaEspecializacion.setEditable(false);
        
        if(usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            cboCargo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        lblCedula = new javax.swing.JLabel();
        lblCorreo = new javax.swing.JLabel();
        lblClave2 = new javax.swing.JLabel();
        lblClave1 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnImagen = new javax.swing.JButton();
        txtCedula = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtClave2 = new javax.swing.JPasswordField();
        txtClave1 = new javax.swing.JPasswordField();
        txtNombreImagen = new javax.swing.JTextField();
        panelImagen = new javax.swing.JPanel();
        lblCargo = new javax.swing.JLabel();
        cboCargo = new javax.swing.JComboBox();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblAreaInteres = new javax.swing.JLabel();
        txtAreaInteres = new javax.swing.JTextField();
        lblSexo = new javax.swing.JLabel();
        cboSexo = new javax.swing.JComboBox();
        lblDisponibilidad = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisponibilidad = new javax.swing.JTable();
        lblHoraInicio = new javax.swing.JLabel();
        lblDia = new javax.swing.JLabel();
        lblHoraFinal = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        cboDia = new javax.swing.JComboBox();
        cboHoraInicio = new javax.swing.JComboBox();
        cboHoraFinal = new javax.swing.JComboBox();
        lblSemestre = new javax.swing.JLabel();
        txtSemestre = new javax.swing.JTextField();
        lblSemestre1 = new javax.swing.JLabel();
        txtAreaEspecializacion = new javax.swing.JTextField();
        lblTipo = new javax.swing.JLabel();
        txtOcupacion = new javax.swing.JTextField();
        lblOcupacion = new javax.swing.JLabel();
        cboTipo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fondo.setBackground(new java.awt.Color(102, 102, 102));

        lblNombre.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(255, 51, 0));
        lblNombre.setText("Nombre");
        lblNombre.setOpaque(true);

        lblApellido.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblApellido.setForeground(new java.awt.Color(255, 51, 0));
        lblApellido.setText("Apellido");
        lblApellido.setOpaque(true);

        lblCedula.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblCedula.setForeground(new java.awt.Color(255, 51, 0));
        lblCedula.setText("Cédula");
        lblCedula.setOpaque(true);

        lblCorreo.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblCorreo.setForeground(new java.awt.Color(255, 51, 0));
        lblCorreo.setText("Correo");
        lblCorreo.setOpaque(true);

        lblClave2.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblClave2.setForeground(new java.awt.Color(255, 51, 0));
        lblClave2.setText("Contraseña");
        lblClave2.setOpaque(true);

        lblClave1.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblClave1.setForeground(new java.awt.Color(255, 51, 0));
        lblClave1.setText("Contraseña");
        lblClave1.setOpaque(true);

        btnGuardar.setText("Guardar");
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarMouseClicked(evt);
            }
        });
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setMaximumSize(new java.awt.Dimension(71, 23));
        btnCancelar.setMinimumSize(new java.awt.Dimension(71, 23));
        btnCancelar.setPreferredSize(new java.awt.Dimension(71, 23));
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelarMouseClicked(evt);
            }
        });

        btnImagen.setText("Imagen");
        btnImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImagenMouseClicked(evt);
            }
        });

        txtCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCedulaActionPerformed(evt);
            }
        });

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCorreoActionPerformed(evt);
            }
        });

        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });

        txtClave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClave2ActionPerformed(evt);
            }
        });

        txtClave1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtClave1MouseClicked(evt);
            }
        });
        txtClave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClave1ActionPerformed(evt);
            }
        });

        txtNombreImagen.setPreferredSize(new java.awt.Dimension(30, 20));
        txtNombreImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreImagenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        lblCargo.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblCargo.setForeground(new java.awt.Color(255, 51, 0));
        lblCargo.setText("Cargo");
        lblCargo.setOpaque(true);

        cboCargo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Miembro", "CoordinadorGeneral" }));

        lblTelefono.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblTelefono.setForeground(new java.awt.Color(255, 51, 0));
        lblTelefono.setText("Teléfono");
        lblTelefono.setOpaque(true);

        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });

        lblAreaInteres.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblAreaInteres.setForeground(new java.awt.Color(255, 51, 0));
        lblAreaInteres.setText("Área Interés");
        lblAreaInteres.setOpaque(true);

        lblSexo.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblSexo.setForeground(new java.awt.Color(255, 51, 0));
        lblSexo.setText("Sexo");
        lblSexo.setOpaque(true);

        cboSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Femenino", "Masculino" }));

        lblDisponibilidad.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblDisponibilidad.setForeground(new java.awt.Color(255, 51, 0));
        lblDisponibilidad.setText("Disponibilidad");
        lblDisponibilidad.setOpaque(true);

        tblDisponibilidad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Dia", "Hora de Inicio", "Hora Final"
            }
        ));
        jScrollPane1.setViewportView(tblDisponibilidad);

        lblHoraInicio.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblHoraInicio.setForeground(new java.awt.Color(255, 51, 0));
        lblHoraInicio.setText("Entrada:");
        lblHoraInicio.setOpaque(true);

        lblDia.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblDia.setForeground(new java.awt.Color(255, 51, 0));
        lblDia.setText("Dia:");
        lblDia.setOpaque(true);

        lblHoraFinal.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblHoraFinal.setForeground(new java.awt.Color(255, 51, 0));
        lblHoraFinal.setText("Salida:");
        lblHoraFinal.setOpaque(true);

        btnAgregar.setText("Agregar");
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });

        cboDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes" }));

        cboHoraInicio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));

        cboHoraFinal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" }));

        lblSemestre.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblSemestre.setForeground(new java.awt.Color(255, 51, 0));
        lblSemestre.setText("Semestre");
        lblSemestre.setOpaque(true);

        lblSemestre1.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblSemestre1.setForeground(new java.awt.Color(255, 51, 0));
        lblSemestre1.setText("Área Especializacion");
        lblSemestre1.setOpaque(true);

        lblTipo.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblTipo.setForeground(new java.awt.Color(255, 51, 0));
        lblTipo.setText("Tipo");
        lblTipo.setOpaque(true);

        lblOcupacion.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblOcupacion.setForeground(new java.awt.Color(255, 51, 0));
        lblOcupacion.setText("Ocupación");
        lblOcupacion.setOpaque(true);

        cboTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Estudiante", "Egresado", "Profesor" }));
        cboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fondoLayout = new javax.swing.GroupLayout(fondo);
        fondo.setLayout(fondoLayout);
        fondoLayout.setHorizontalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(btnAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(fondoLayout.createSequentialGroup()
                                        .addGap(211, 211, 211)
                                        .addComponent(btnImagen)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNombreImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(fondoLayout.createSequentialGroup()
                                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDia)
                                            .addGroup(fondoLayout.createSequentialGroup()
                                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblHoraInicio)
                                                    .addComponent(lblHoraFinal))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cboHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cboHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGap(30, 30, 30)))
                                .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDisponibilidad)
                                    .addGroup(fondoLayout.createSequentialGroup()
                                        .addComponent(lblNombre)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblCedula)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblClave1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtClave1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(fondoLayout.createSequentialGroup()
                                        .addComponent(lblApellido)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                                                .addComponent(lblCorreo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblClave2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtClave2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(fondoLayout.createSequentialGroup()
                                                .addComponent(lblAreaInteres, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtOcupacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(fondoLayout.createSequentialGroup()
                                                        .addComponent(txtAreaInteres, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(lblSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(cboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(fondoLayout.createSequentialGroup()
                                            .addComponent(lblCargo)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(fondoLayout.createSequentialGroup()
                                            .addComponent(lblTelefono)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(66, 66, 66))
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSemestre)
                            .addComponent(lblTipo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOcupacion)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(lblSemestre1)
                                .addGap(18, 18, 18)
                                .addComponent(txtAreaEspecializacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        fondoLayout.setVerticalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(lblClave1)
                    .addComponent(lblCedula)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtClave1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClave2)
                    .addComponent(txtClave2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApellido)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCorreo)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefono)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAreaInteres)
                    .addComponent(txtAreaInteres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSexo)
                    .addComponent(cboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(txtOcupacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOcupacion)
                    .addComponent(cboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemestre)
                    .addComponent(txtSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSemestre1)
                    .addComponent(txtAreaEspecializacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 176, Short.MAX_VALUE))
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCargo)
                            .addComponent(btnImagen)
                            .addComponent(txtNombreImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblDisponibilidad)
                        .addGap(18, 18, 18)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDia)
                                    .addComponent(cboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblHoraInicio)
                                    .addComponent(cboHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblHoraFinal)
                                    .addComponent(cboHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregar)
                            .addComponent(btnEliminar)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(99, 99, 99))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        this.getTxtAreaInteres().requestFocus();
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void txtClave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClave1ActionPerformed

        this.getTxtClave1().requestFocus();
    }//GEN-LAST:event_txtClave1ActionPerformed

    private void txtClave1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtClave1MouseClicked

        if(origen.equalsIgnoreCase("Sala")){

            setCambiarClave(confirmarCambioClave());

            if(cambiarClave){
                txtClave1.setEditable(true);
                txtClave2.setEditable(true);
                txtClave1.setText("");
                txtClave2.setText("");
            }
        }

    }//GEN-LAST:event_txtClave1MouseClicked

    private void txtClave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClave2ActionPerformed

        this.getTxtTelefono().requestDefaultFocus();
    }//GEN-LAST:event_txtClave2ActionPerformed

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed

        this.getTxtCedula().requestFocus();
    }//GEN-LAST:event_txtApellidoActionPerformed

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed

        this.getTxtClave1().requestFocus();
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed

        this.getTxtApellido().requestFocus();
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCedulaActionPerformed

        this.getTxtCorreo().requestFocus();
    }//GEN-LAST:event_txtCedulaActionPerformed

    private void btnImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImagenMouseClicked

        if(origen.equalsIgnoreCase("Sala")){

            setCambiarImagen(confirmarCambioImagen());

            if(cambiarImagen){

                JFileChooser selector = new JFileChooser();
                FileNameExtensionFilter filtroImagen= new FileNameExtensionFilter("JPG","jpg");
                selector.setFileFilter(filtroImagen);

                int opcion = selector.showOpenDialog(this);  //abre la ventana

                if(opcion==JFileChooser.APPROVE_OPTION){          //si hace click en el boton abrir de la ventana
                    try {
                        archivo=selector.getSelectedFile();
                        txtNombreImagen.setText(archivo.getName());
                        panelImagen.removeAll();
                        panelImagen.add(new Fondo(150,150,selector.getSelectedFile().toURL()));
                        this.repaint();
                    }catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }else{
            JFileChooser selector = new JFileChooser();
            FileNameExtensionFilter filtroImagen= new FileNameExtensionFilter("JPG","jpg");
            selector.setFileFilter(filtroImagen);

            int opcion = selector.showOpenDialog(this);  //abre la ventana

            if(opcion==JFileChooser.APPROVE_OPTION){          //si hace click en el boton abrir de la ventana
                try {
                    archivo=selector.getSelectedFile();
                    txtNombreImagen.setText(archivo.getName());
                    panelImagen.removeAll();
                    panelImagen.add(new Fondo(150,150,selector.getSelectedFile().toURL()));
                    this.repaint();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_btnImagenMouseClicked

    private void btnCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseClicked

        String[] args=null;
        GestionUsuario.hostname = this.hostname;
        GestionUsuario.usuarioActual = this.usuarioActual;
        GestionUsuario.main(args);
        this.dispose();
    }//GEN-LAST:event_btnCancelarMouseClicked

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseClicked
        if(origen .equalsIgnoreCase("Login")){
            if(verificarCampos()){
                if(guardarUsuario()){
                    String[] args = null;
                    Sala.hostname = this.hostname;
                    Sala.usuarioActual = this.usuarioActual;
                    Sala.main(args);
                    this.dispose();
                    
                }
            }
        }else{
            if(verificarCampos()){
                if(confirmarUsuario())
                if(actualizarUsuario()){
                    String[] args = null;

                    Sala.hostname = this.hostname;
                    Sala.usuarioActual = this.usuarioActual;
                    Sala.main(args);
                    this.dispose();
                    
                }
            }

        }
    }//GEN-LAST:event_btnGuardarMouseClicked

    private void txtNombreImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreImagenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreImagenActionPerformed

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseClicked
        
        
        if(numFilas==0){
            String datos[][]={};
            String columnas[]={"Dia","Hora de Inicio","Hora Final"};
            modelo= new DefaultTableModel(datos,columnas){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            tblDisponibilidad.setModel(modelo);
            
        }

        if(Integer.parseInt((String)(cboHoraInicio.getSelectedItem())) < Integer.parseInt((String)(cboHoraFinal.getSelectedItem()))){
            boolean existe=false;
            
            for(int i=0;i<modelo.getRowCount();i++){
                if(modelo.getValueAt(i, 0).equals(cboDia.getSelectedItem()) &&
                    modelo.getValueAt(i, 1).equals(cboHoraInicio.getSelectedItem()) &&
                    modelo.getValueAt(i, 2).equals(cboHoraFinal.getSelectedItem()))
                existe=true;
            }
            
            if(!existe){
                modelo.insertRow(numFilas,new Object[]{});
                modelo.setValueAt((String)cboDia.getSelectedItem(),numFilas,0);
                modelo.setValueAt((String)cboHoraInicio.getSelectedItem(),numFilas,1);
                modelo.setValueAt((String)cboHoraFinal.getSelectedItem(),numFilas,2);
                numFilas++;
            }
        }

    }//GEN-LAST:event_btnAgregarMouseClicked

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked

        if(numFilas>0){
            int i,fila=-1;

            for(i=0;i<modelo.getRowCount();i++){
                if(modelo.getValueAt(i, 0).equals(cboDia.getSelectedItem()) &&
                    modelo.getValueAt(i, 1).equals(cboHoraInicio.getSelectedItem()) &&
                    modelo.getValueAt(i, 2).equals(cboHoraFinal.getSelectedItem())){
                    fila=i;
                    break;
                }
            }

            if(fila>-1){
                modelo.removeRow(fila);
                numFilas--;
            }
        }

    }//GEN-LAST:event_btnEliminarMouseClicked

    private void cboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipoActionPerformed
        if(cboTipo.getSelectedItem().equals("Estudiante")){
            txtSemestre.setEditable(true);
            txtOcupacion.setText("");
            txtOcupacion.setEditable(false);
            txtAreaEspecializacion.setText("");
            txtAreaEspecializacion.setEditable(false);
        }else{
            if(cboTipo.getSelectedItem().equals("Egresado")){
                txtSemestre.setEditable(false);
                txtSemestre.setText("");
                txtOcupacion.setEditable(true);
                txtAreaEspecializacion.setEditable(true);
            }else{
                txtSemestre.setEditable(false);
                txtSemestre.setText("");
                txtOcupacion.setText("");
                txtOcupacion.setEditable(false);
                txtAreaEspecializacion.setEditable(true);
            }
        }
    }//GEN-LAST:event_cboTipoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registro().setVisible(true);
            }
        });
    }
    
    public boolean verificarCampos(){
        if(!verificarNombre(txtNombre.getText()))
            return false;
        
        if(!verificarApellido(txtApellido.getText()))
            return false;
        
        if(!verificarCedula(txtCedula.getText()))
            return false;
        
        if(!verificarCorreo(txtCorreo.getText()))
            return false;
        
        if(!verificarPass(txtClave1.getText(),txtClave2.getText()))
            return false;
        
        if(!verificarImagen(archivo,origen))
            return false;
        
        if(!verificarDisponibilidad())
            return false;
        
        if(!verificartelefono())
            return false;
        
        if(!verificarArea())
            return false;
        
        if(!verificarTipo())
            return false;
        
        return true;
    }
    
    public boolean verificarTipo(){
        
        if(cboTipo.getSelectedItem().equals("Estudiante")){
            if(txtSemestre.getText().length()==0){
                JOptionPane.showMessageDialog(this, "Debe indicar el semestre que está cursando");
                return false;
            }
            
            for(int i = 0; i < txtSemestre.getText().length(); ++i){
            
                char caracter = txtSemestre.getText().charAt(i);

                if(!Character.isDigit(caracter)){
                    JOptionPane.showMessageDialog(this, "Semestre inválido solo números, sin letras ni espacios");
                    return false;
                }
            }
            return true;
        }else{
            if(cboTipo.getSelectedItem().equals("Egresado")){
                
                if(txtOcupacion.getText().length()==0){
                    JOptionPane.showMessageDialog(this, "Debe indicar su ocupación");
                    return false;
                }
                
                if(txtAreaEspecializacion.getText().length()==0){
                    JOptionPane.showMessageDialog(this, "Debe indicar su área de especialización");
                    return false;
                }
                return true;
            }else{
                if(txtAreaEspecializacion.getText().length()==0){
                    JOptionPane.showMessageDialog(this, "Debe indicar su área de especialización");
                    return false;
                }
                return true;
            }
        }
    }
    
    public boolean verificarArea(){
        
        if(txtAreaInteres.getText().length()==0){
            JOptionPane.showMessageDialog(this, "Debe indicar su área de interés");
            return false;
        }
        
        return true;
    }
    
    public boolean verificartelefono(){
        
        if(txtTelefono.getText().length()==0){
            JOptionPane.showMessageDialog(this, "Debe ingresar un número de télefono");
            return false;
        }
        
        for(int i = 0; i < txtTelefono.getText().length(); ++i){
            
            char caracter = txtTelefono.getText().charAt(i);
            
            if(!Character.isDigit(caracter)){
                JOptionPane.showMessageDialog(this, "Télefono inválido; solo números, sin símbolos ni espacios");
                return false;
            }
        }
        
        return true;
    }
    
    
    public boolean verificarDisponibilidad(){
        
        if(numFilas<1){
            JOptionPane.showMessageDialog(this, "Debe indicar la disponibilidad de asistir al laboratorio");
            return false;
        }
            
        return true;
    }
    
    public boolean verificarNombre(String nombre){ 
        
        if(nombre.length()<2 || nombre.length()>20) {
            JOptionPane.showMessageDialog(this, "El Nombre debe tener de 2 a 20 caracteres");
            return false;
        }
        
        for(int i = 0; i < nombre.length(); ++i){
            
            char caracter = nombre.charAt(i);
            
            if(!Character.isLetter(caracter)){
                JOptionPane.showMessageDialog(this, "Nombre inválido");
                return false;
            }
        }
        return true;  
    }
    
    public boolean verificarApellido(String apellido){ 
        
        if(apellido.length()<2 || apellido.length()>20){
            JOptionPane.showMessageDialog(this, "El Apellido debe tener de 2 a 20 caracteres");
            return false;
        }
        
        for(int i = 0; i < apellido.length(); ++i){
            
            char caracter = apellido.charAt(i);
            
            if(!Character.isLetter(caracter)){
                JOptionPane.showMessageDialog(this, "Apellido inválido");
                return false;
            }
        }
        return true;  
    }
    
    
    
    public boolean verificarCedula(String cedula){
        
        if(origen.equalsIgnoreCase("Sala"))
            return true;
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar","miembrogipar");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        if(cedula.length()==0){
            JOptionPane.showMessageDialog(this, "La cédula no puede quedar en blanco");
            return false;
        }
        
        for(int i = 0; i < cedula.length(); ++i){
            
            char caracter = cedula.charAt(i);
            
            if(!Character.isDigit(caracter)){
                JOptionPane.showMessageDialog(this, "Cédula inválida; solo números, sin puntos ni espacios");
                return false;
            }
        }
        
        
        
        try {
            sentenciaSQL = "SELECT cedula FROM miembros WHERE cedula='"+cedula+"'";
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                JOptionPane.showMessageDialog(this, "La cédula que ingresaste ya está registrada,\nen el sistema.");
                return false;
            }else{
                return true;
            } 
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        
    }
    
    public boolean verificarCorreo(String correo){
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar","miembrogipar");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        String PATTERN_EMAIL = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
   
        Pattern pattern = Pattern.compile(PATTERN_EMAIL);
      
        Matcher matcher = pattern.matcher(correo);
        
        if(!matcher.matches()){
            JOptionPane.showMessageDialog(this, "Correo inválido");
            return false;
        }
        
        try {
            sentenciaSQL = "SELECT correo FROM miembros WHERE correo='"+correo+"'";
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                if(origen.equalsIgnoreCase("Sala"))
                    if(this.usuarioActual.getCorreo().equalsIgnoreCase(correo))
                        return true;
                
                JOptionPane.showMessageDialog(this, "El correo que ingresaste ya esta en uso,\npor favor verifica tu correo."
                                                  + "\n\nSi el problema persiste contacta\nal administrador.");
                return false;
            }else{
                return true;
            } 
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        
        
    
    }
    
    public boolean verificarPass(String pass1, String pass2){
        
        if(origen.equalsIgnoreCase("Sala"))
            if(!cambiarClave)
                return true;
        
        if(!pass1.equals(pass2)){
            JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden");
            return false;
        }
        
        if(pass1.length()<6 || pass1.length()>15){
            JOptionPane.showMessageDialog(this, "La Contraseña debe tener de 6 a 15 caracteres");
            return false;
        }
        
        for(int i = 0; i < pass1.length(); ++i){
            
            char caracter = pass1.charAt(i);
            
            if(!Character.isLetterOrDigit(caracter)){
                JOptionPane.showMessageDialog(this, "La Contraseña sólo debe contener letras y/o números");
                return false;
            }
        }
        return true;
    }
    
    public boolean verificarImagen(File archivo, String origen){
        
        if(origen.equalsIgnoreCase("Sala"))
            if(!cambiarImagen)
                return true;
        
        //peso max 85kb probado
        //peso max 65kb teoria
        ImageIcon imagenTemporal = null;
        
        if(archivo!=null && txtNombreImagen.getText().length()>4){ 
            if(archivo.length()>=65000){
            
                return ofrecerImagen();
           
            }else{

            int i = archivo.getPath().lastIndexOf('.');
            tipoDeImagen = archivo.getPath().substring(i+1);
            if(tipoDeImagen.equalsIgnoreCase("jpg")){
                imagenTemporal = new ImageIcon(archivo.getPath());
                
            }
                
            if(imagenTemporal!=null)
                return true;
           }
        }else{
            JOptionPane.showMessageDialog(this, "Imagen inválida");
        
            return ofrecerImagen();
        }
         
        return ofrecerImagen();
    }
    
    public boolean ofrecerImagen(){
        
        ImageIcon imagenTemporal = null;
    
        String opciones[] = new String[] {"Buscar Otra Imagen","Usar Imagen Predeterminada"};
                int intOpcion = JOptionPane.showOptionDialog(null, "La Imagen que has seleccionado\nexcede el límite de peso(65kb)\n"
                                                                  + "soportado para poder enviarla\ntus oponentes ó presenta\n"
                                                                  + "otro tipo de inconveniente, por favor\n"
                                                                  + "selecciona otra imagen o usa\nesta imagen predeterminada\n"
                                                                  + "hasta que tengas una imagen\ncon el peso apropiado"
                                                                  , "Problema con imagen seleccionada"
                                                                  , JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE
                                                                  , new ImageIcon(getClass().getResource("/Imagenes/imagenAuxiliar.jpg")), opciones, opciones[0]);

                switch(intOpcion){

                    case 0:{
                        return false;
                    }
                        
                    case 1:{
                        
                        
                        
                        archivo = new File("src/Imagenes/imagenAuxiliar.jpg");
                        
                        if(archivo!=null){
                            JOptionPane.showMessageDialog(null, "Cargando Imagen Predeterminada...");
                            imagenTemporal = new ImageIcon(getClass().getResource("/Imagenes/imagenAuxiliar.jpg"));
                            txtNombreImagen.setText("imagenAuxiliar.jpg");
                            panelImagen.removeAll();
                            panelImagen.add(new Fondo(150,150,"/Imagenes/imagenAuxiliar.jpg"));
                            this.repaint();
                            return true;
                        }
                        else
                            return false;
                    }
 
                    default:{
                        return verificarImagen(archivo,origen);
                    }
                }
        
    }
    
    
    public boolean guardarUsuario(){
        
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        String nombre,apellido,cedula,clave,imagen,correo,telefono,disponibilidad,areaInteres,cargo,sexo;
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        nombre = txtNombre.getText();
        apellido = txtApellido.getText();
        cedula = getTxtCedula().getText();
        clave = txtClave1.getText();
        correo = getTxtCorreo().getText();
        telefono = getTxtTelefono().getText();
        areaInteres = getTxtAreaInteres().getText();
        sexo = (String) getCboSexo().getSelectedItem();
        cargo = (String) getCboCargo().getSelectedItem();
        imagen="";
        
        
        
        try {
            BufferedImage img = ImageIO.read(archivo);
            imagen = Imagen.encodeToString(img, "jpg");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        
        sentenciaSQL = "INSERT INTO miembros(nombre,apellido,cedula,clave,correo,imagen,sexo,telefono,areaInteres,"
                     + "cargo) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    
        
        PreparedStatement PST;
        try {
            PST = conexion.prepareStatement(sentenciaSQL);
            PST.setString(1, nombre);
            PST.setString(2, apellido);
            PST.setString(3, cedula);
            PST.setString(4, DigestUtils.md5Hex(clave));
            PST.setString(5, correo);
            PST.setString(6, imagen);
            PST.setString(7, sexo);
            PST.setString(8, telefono);
            PST.setString(9, areaInteres);
            PST.setString(10, cargo);
            
            
            
            
            if(PST.executeUpdate()<=0){
                JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                return false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        String id="";
        sentenciaSQL = "SELECT idMiembro FROM miembros WHERE cedula='"+cedula+"'";
        Statement ST;
        try {
            ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                id = RS.getString("idMiembro");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        sentenciaSQL = "INSERT INTO disponibilidad_miembros(idMiembro,dia,horaInicio,horaFinal)"
                     + "VALUES(?, ?, ?, ?)";
        
        int fila;
        
        for(fila=0;fila<tblDisponibilidad.getRowCount();fila++){
            
            try {
                PST = conexion.prepareStatement(sentenciaSQL);
                PST.setString(1, id);
                PST.setString(2, (String)tblDisponibilidad.getValueAt(fila, 0));
                PST.setString(3, (String)tblDisponibilidad.getValueAt(fila, 1));
                PST.setString(4, (String)tblDisponibilidad.getValueAt(fila, 2));

                if(PST.executeUpdate()<=0){
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar la disponibilidad");
                    return false;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
        }
        
        if(cboTipo.getSelectedItem().equals("Estudiante")){
            sentenciaSQL = "INSERT INTO estudiantes(idMiembro,semestre) VALUES(?, ?)";
            try {
                PST = conexion.prepareStatement(sentenciaSQL);
                PST.setString(1, id);
                PST.setString(2, txtSemestre.getText());
            } catch (SQLException ex) {
               JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }else{
            if(cboTipo.getSelectedItem().equals("Egresado")){
                sentenciaSQL = "INSERT INTO egresados(idMiembro,ocupacion,areaEspecialidad) VALUES(?, ?, ?)";
                try {
                    PST = conexion.prepareStatement(sentenciaSQL);
                    PST.setString(1, id);
                    PST.setString(2, txtOcupacion.getText());
                    PST.setString(3, txtAreaEspecializacion.getText());
                } catch (SQLException ex) {
                   JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }else{
                
                sentenciaSQL = "INSERT INTO profesores(idMiembro,areaEspecialidad) VALUES(?, ?)";
                try {
                    PST = conexion.prepareStatement(sentenciaSQL);
                    PST.setString(1, id);
                    PST.setString(2, txtAreaEspecializacion.getText());
                } catch (SQLException ex) {
                   JOptionPane.showMessageDialog(this, ex.getMessage());
                } 
            }
        }
        
        
        
        JOptionPane.showMessageDialog(this, "Usuario registrado satisfactoriamente.");
        return true;
        
    }
    
    public boolean actualizarUsuario(){
        
        String nombre,apellido,cedula,clave,imagen,correo,telefono,disponibilidad,areaInteres,cargo,sexo;
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar","miembrogipar");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        nombre = txtNombre.getText();
        apellido = txtApellido.getText();
        cedula = getTxtCedula().getText();
        clave = txtClave1.getText();
        correo = getTxtCorreo().getText();
        telefono = getTxtTelefono().getText();
        areaInteres = getTxtAreaInteres().getText();
        sexo = (String) getCboSexo().getSelectedItem();
        cargo = (String) getCboCargo().getSelectedItem();
        imagen="";
        
        
        if(cambiarClave){
            clave = DigestUtils.md5Hex(clave);
        }
        
        if(cambiarImagen){
        
            try {
                BufferedImage img = ImageIO.read(archivo);
                imagen = Imagen.encodeToString(img, "jpg");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
        else
            imagen = this.usuarioActual.getImagen();
        
        
     
        sentenciaSQL = " UPDATE miembros SET nombre = '"+nombre+"', apellido = '"+apellido+"',"
                     + " correo = '"+correo+"', clave = '"+clave+"',"+" telefono = '"+telefono+"',"
                     + " areaInteres = '"+areaInteres+"', sexo = '"+sexo+"',"
                     + " cargo = '"+cargo+"', imagen = '"+imagen+"' "
                     + " WHERE cedula = '"+cedula+"'";
        
        PreparedStatement PST;
        try {
            PST = conexion.prepareStatement(sentenciaSQL);
            
            if(PST.executeUpdate()>0){
                this.usuarioActual = new Usuario(nombre, apellido, cedula, DigestUtils.md5Hex(clave), imagen, correo,
                                                 telefono, areaInteres, cargo,sexo);
                
            }
            else{
                JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                return false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        String id="";
        sentenciaSQL = "SELECT idMiembro FROM miembros WHERE cedula='"+this.usuarioActual.getCedula()+"'";
        Statement ST;
        
        try {
            ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                id = RS.getString("idMiembro");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        sentenciaSQL = "DELETE FROM disponibilidad_miembros WHERE idMiembro='"+id+"'";
        try {
            ST = conexion.createStatement();
            ST.executeUpdate(sentenciaSQL);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        
        sentenciaSQL = "INSERT INTO disponibilidad_miembros(idMiembro,dia,horaInicio,horaFinal)"
                     + "VALUES(?, ?, ?, ?)";
        int fila; 
        for(fila=0;fila<tblDisponibilidad.getRowCount();fila++){
  
            try {
                PST = conexion.prepareStatement(sentenciaSQL);
                PST.setString(1, id);
                PST.setString(2, (String)tblDisponibilidad.getValueAt(fila, 0));
                PST.setString(3, (String)tblDisponibilidad.getValueAt(fila, 1));
                PST.setString(4, (String)tblDisponibilidad.getValueAt(fila, 2));

                if(PST.executeUpdate()<=0){
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar la disponibilidad");
                    return false;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
        }
        
        if(cboTipo.getSelectedItem().equals("Estudiante")){
            
            sentenciaSQL = "DELETE FROM profesores WHERE idMiembro='"+id+"'";
            try {
                ST = conexion.createStatement();
                ST.executeUpdate(sentenciaSQL);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            
            sentenciaSQL = "DELETE FROM egresados WHERE idMiembro='"+id+"'";
            try {
                ST = conexion.createStatement();
                ST.executeUpdate(sentenciaSQL);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            
            sentenciaSQL = " UPDATE estudiantes SET semestre = '"+txtSemestre.getText()+"' WHERE idMiembro = '"+id+"'";
            try {
                PST = conexion.prepareStatement(sentenciaSQL);

                if(PST.executeUpdate()<=0){
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                    return false;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
        }else{
            
            if(cboTipo.getSelectedItem().equals("Egresado")){
            
                sentenciaSQL = "DELETE FROM estudiantes WHERE idMiembro='"+id+"'";
                try {
                    ST = conexion.createStatement();
                    ST.executeUpdate(sentenciaSQL);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

                sentenciaSQL = "DELETE FROM profesores WHERE idMiembro='"+id+"'";
                try {
                    ST = conexion.createStatement();
                    ST.executeUpdate(sentenciaSQL);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

                sentenciaSQL = " UPDATE egresados SET ocupacion = '"+txtOcupacion.getText()+"',"
                             + "areaEspecialidad = '"+txtAreaEspecializacion.getText()+"' WHERE idMiembro = '"+id+"'";
                try {
                    PST = conexion.prepareStatement(sentenciaSQL);

                    if(PST.executeUpdate()<=0){
                        JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                        return false;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    return false;
                }
            }else{
                
                sentenciaSQL = "DELETE FROM estudiantes WHERE idMiembro='"+id+"'";
                try {
                    ST = conexion.createStatement();
                    ST.executeUpdate(sentenciaSQL);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

                sentenciaSQL = "DELETE FROM egresados WHERE idMiembro='"+id+"'";
                try {
                    ST = conexion.createStatement();
                    ST.executeUpdate(sentenciaSQL);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

                sentenciaSQL = " UPDATE profesores SET areaEspecialidad = '"+txtAreaEspecializacion.getText()+"' WHERE idMiembro = '"+id+"'";
                try {
                    PST = conexion.prepareStatement(sentenciaSQL);

                    if(PST.executeUpdate()<=0){
                        JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                        return false;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    return false;
                }
            }
        }
        
        JOptionPane.showMessageDialog(this, "Datos modificados satisfactoriamente.");
        return true;
    }
    
    
    
    public void cargarUsuario(){
        String datos[][]={};
        String columnas[]={"Dia","Hora de Inicio","Hora Final"};
        modelo= new DefaultTableModel(datos,columnas){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }
                    };
            tblDisponibilidad.setModel(modelo);
        ImageIcon imagenTemporal = null;
        
        
        txtNombre.setText(this.usuarioActual.getNombre());
        txtApellido.setText(this.usuarioActual.getApellido());
        txtCedula.setText(this.usuarioActual.getCedula());
        txtCorreo.setText(this.usuarioActual.getEimail());
        txtClave1.setText(this.usuarioActual.getClave());
        txtClave2.setText(this.usuarioActual.getClave());
        txtTelefono.setText(this.usuarioActual.getTelefono());
        txtAreaInteres.setText(this.usuarioActual.getAreaInteres());
        cboSexo.setSelectedItem(this.usuarioActual.getSexo());
        getCboCargo().setSelectedItem(this.usuarioActual.getCargo());
        
        txtNombreImagen.setText("");
        panelImagen.removeAll();
        
        imagenTemporal = new ImageIcon(Imagen.decodeToImage(usuarioActual.getImagen()));
        
        panelImagen.add(new Fondo(150,150, imagenTemporal));
        
        String id="";
        String sentenciaSQL = "SELECT idMiembro FROM miembros WHERE cedula='"+this.usuarioActual.getCedula()+"'";
        Statement ST;
        ConexionMYSQL mysql = new ConexionMYSQL(hostname, "bdgipar", "miembrogipar");
        Connection conexion = mysql.conectar();
        
        try {
            ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                id = RS.getString("idMiembro");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        sentenciaSQL = "SELECT dia,horaInicio,horaFinal FROM disponibilidad_miembros WHERE idMiembro='"+id+"'";
        
        int i=0;
        try {
            ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            while(RS.next()){
                modelo.insertRow(i, new Object[]{});
                modelo.setValueAt(RS.getString("dia"),i, 0);
                modelo.setValueAt(RS.getString("horaInicio"),i, 1);
                modelo.setValueAt(RS.getString("horaFinal"),i, 2);
                i++;
            }
            numFilas=i;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        boolean bandera = false;
        sentenciaSQL = "SELECT semestre FROM estudiantes WHERE idMiembro='"+id+"'";
        
        try {
            ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                txtSemestre.setEditable(true);
                txtSemestre.setText(RS.getString("semestre"));
                txtOcupacion.setEditable(false);
                txtAreaEspecializacion.setEditable(false);
                cboTipo.setSelectedItem("Estudiante");
                bandera=true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        if(bandera==false){
            
            sentenciaSQL = "SELECT ocupacion,areaEspecialidad FROM egresados WHERE idMiembro='"+id+"'";
        
            try {
                ST = conexion.createStatement();
                ResultSet RS = ST.executeQuery(sentenciaSQL);

                if(RS.next()){
                    txtOcupacion.setEditable(true);
                    txtOcupacion.setText(RS.getString("ocupacion"));
                    txtAreaEspecializacion.setEditable(true);
                    txtAreaEspecializacion.setText(RS.getString("areaEspecialidad"));
                    txtSemestre.setEditable(false);
                    cboTipo.setSelectedItem("Egresado");
                    bandera=true;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            
        }
        
        if(bandera==false){
            
            sentenciaSQL = "SELECT areaEspecialidad FROM profesores WHERE idMiembro='"+id+"'";
        
            try {
                ST = conexion.createStatement();
                ResultSet RS = ST.executeQuery(sentenciaSQL);

                if(RS.next()){
                    txtOcupacion.setEditable(false);
                    txtAreaEspecializacion.setEditable(true);
                    txtAreaEspecializacion.setText(RS.getString("areaEspecialidad"));
                    txtSemestre.setEditable(false);
                    cboTipo.setSelectedItem("Profesor");
                    bandera=true;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            
        }
        
        
    }
    
    public boolean confirmarCambioClave(){
        
        if(cambiarClave == true)
            return true;
    
        String opciones[] = new String[] {"Sí","No"};
        int opcion = JOptionPane.showOptionDialog(null, "¿Desea cambiar su contraseña?\n"
                                                        + "Si dice que sí no se podrá arrepentir y\n"
                                                        + "deberá ejecutar el cambio de clave."
                                                        , "Confirmacion de cambio clave",
                                                        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                                                        new ImageIcon(getClass().getResource("/Imagenes/piensa.gif")), opciones, opciones[0]);
        
        switch(opcion){
            
            case 0:{
                return true;
            }
            
            case 1:{
                return false;   
            }
            
            default:{
                return confirmarCambioClave();
            }
        }
    }
    
   
    
    
    public boolean confirmarCambioImagen(){
        
        if(cambiarImagen == true)
            return true;
    
        String opciones[] = new String[] {"Sí","No"};
        int opcion = JOptionPane.showOptionDialog(null, "¿Desea cambiar su Imagen?\n"
                                                        + "Si dice que sí no se podrá arrepentir y\n"
                                                        + "deberá ejecutar el cambio de imagen."
                                                        , "Confirmacion de cambio imagen",
                                                        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                                                        new ImageIcon(getClass().getResource("/Imagenes/piensa.gif")), opciones, opciones[0]);
        
        switch(opcion){
            
            case 0:{
                return true;
            }
            
            case 1:{
                return false;   
            }
            
            default:{
                return confirmarCambioClave();
            }
        }
    }
    
    public boolean confirmarUsuario(){
        
        JPasswordField txtPass = new JPasswordField();
        int opcion = JOptionPane.showConfirmDialog(null, txtPass, "Ingresa tu contraseña", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (opcion == JOptionPane.OK_OPTION) {
            String clave = new String(txtPass.getPassword());
            
            if(Login.verificarUsuario(this.hostname, this.usuarioActual.getCedula(), DigestUtils.md5Hex(clave)))
                return true;
            else
                JOptionPane.showMessageDialog(this, "La contraseña introducida es incorrecta");
        }
        return false;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImagen;
    private javax.swing.JComboBox cboCargo;
    private javax.swing.JComboBox cboDia;
    private javax.swing.JComboBox cboHoraFinal;
    private javax.swing.JComboBox cboHoraInicio;
    private javax.swing.JComboBox cboSexo;
    private javax.swing.JComboBox cboTipo;
    private javax.swing.JPanel fondo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblAreaInteres;
    private javax.swing.JLabel lblCargo;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblClave1;
    private javax.swing.JLabel lblClave2;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblDia;
    private javax.swing.JLabel lblDisponibilidad;
    private javax.swing.JLabel lblHoraFinal;
    private javax.swing.JLabel lblHoraInicio;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblOcupacion;
    private javax.swing.JLabel lblSemestre;
    private javax.swing.JLabel lblSemestre1;
    private javax.swing.JLabel lblSexo;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JPanel panelImagen;
    private javax.swing.JTable tblDisponibilidad;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtAreaEspecializacion;
    private javax.swing.JTextField txtAreaInteres;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JPasswordField txtClave1;
    private javax.swing.JPasswordField txtClave2;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombreImagen;
    private javax.swing.JTextField txtOcupacion;
    private javax.swing.JTextField txtSemestre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the imagenFondo
     */
    public Fondo getImagenFondo() {
        return imagenFondo;
    }

    /**
     * @param imagenFondo the imagenFondo to set
     */
    public void setImagenFondo(Fondo imagenFondo) {
        this.imagenFondo = imagenFondo;
    }

    /**
     * @return the origen
     */
    public String getOrigen() {
        return origen;
    }

    

    /**
     * @return the btnCancelar
     */
    public javax.swing.JButton getBtnCancelar() {
        return btnCancelar;
    }

    /**
     * @param btnCancelar the btnCancelar to set
     */
    public void setBtnCancelar(javax.swing.JButton btnCancelar) {
        this.btnCancelar = btnCancelar;
    }

    /**
     * @return the btnGuardar
     */
    public javax.swing.JButton getBtnGuardar() {
        return btnGuardar;
    }

    /**
     * @param btnGuardar the btnGuardar to set
     */
    public void setBtnGuardar(javax.swing.JButton btnGuardar) {
        this.btnGuardar = btnGuardar;
    }

    /**
     * @return the btnImagen
     */
    public javax.swing.JButton getBtnImagen() {
        return btnImagen;
    }

    /**
     * @param btnImagen the btnImagen to set
     */
    public void setBtnImagen(javax.swing.JButton btnImagen) {
        this.btnImagen = btnImagen;
    }

  

    /**
     * @return the fondo
     */
    public javax.swing.JPanel getFondo() {
        return fondo;
    }

    /**
     * @param fondo the fondo to set
     */
    public void setFondo(javax.swing.JPanel fondo) {
        this.fondo = fondo;
    }

    /**
     * @return the lblApellido
     */
    public javax.swing.JLabel getLblApellido() {
        return lblApellido;
    }

    /**
     * @param lblApellido the lblApellido to set
     */
    public void setLblApellido(javax.swing.JLabel lblApellido) {
        this.lblApellido = lblApellido;
    }

    /**
     * @return the lblCorreo
     */
    public javax.swing.JLabel getLblCorreo() {
        return lblCorreo;
    }

    /**
     * @param lblCorreo the lblCorreo to set
     */
    public void setLblCorreo(javax.swing.JLabel lblCorreo) {
        this.lblCorreo = lblCorreo;
    }


    /**
     * @return the lblNombre
     */
    public javax.swing.JLabel getLblNombre() {
        return lblNombre;
    }

    /**
     * @param lblNombre the lblNombre to set
     */
    public void setLblNombre(javax.swing.JLabel lblNombre) {
        this.lblNombre = lblNombre;
    }

    /**
     * @return the panelImagen
     */
    public javax.swing.JPanel getPanelImagen() {
        return panelImagen;
    }

    /**
     * @param panelImagen the panelImagen to set
     */
    public void setPanelImagen(javax.swing.JPanel panelImagen) {
        this.panelImagen = panelImagen;
    }

    /**
     * @return the txtApellido
     */
    public javax.swing.JTextField getTxtApellido() {
        return txtApellido;
    }

    /**
     * @param txtApellido the txtApellido to set
     */
    public void setTxtApellido(javax.swing.JTextField txtApellido) {
        this.txtApellido = txtApellido;
    }

    /**
     * @return the txtCorreo
     */
    public javax.swing.JTextField getTxtCorreo() {
        return txtCorreo;
    }

    /**
     * @param txtCorreo the txtCorreo to set
     */
    public void setTxtCorreo(javax.swing.JTextField txtCorreo) {
        this.txtCorreo = txtCorreo;
    }


    /**
     * @return the txtNombre
     */
    public javax.swing.JTextField getTxtNombre() {
        return txtNombre;
    }

    /**
     * @param txtNombre the txtNombre to set
     */
    public void setTxtNombre(javax.swing.JTextField txtNombre) {
        this.txtNombre = txtNombre;
    }

    /**
     * @return the txtNombreImagen
     */
    public javax.swing.JTextField getTxtNombreImagen() {
        return txtNombreImagen;
    }

    /**
     * @param txtNombreImagen the txtNombreImagen to set
     */
    public void setTxtNombreImagen(javax.swing.JTextField txtNombreImagen) {
        this.txtNombreImagen = txtNombreImagen;
    }

    /**
     * @return the txtClave1
     */
    public javax.swing.JPasswordField getTxtClave1() {
        return txtClave1;
    }

    /**
     * @param txtClave1 the txtClave1 to set
     */
    public void setTxtClave1(javax.swing.JPasswordField txtClave1) {
        this.txtClave1 = txtClave1;
    }

    /**
     * @return the txtClave2
     */
    public javax.swing.JPasswordField getTxtClave2() {
        return txtClave2;
    }

    /**
     * @param txtClave2 the txtClave2 to set
     */
    public void setTxtClave2(javax.swing.JPasswordField txtClave2) {
        this.txtClave2 = txtClave2;
    }

    /**
     * @param cambiarImagen the cambiarImagen to set
     */
    public void setCambiarImagen(boolean cambiarImagen) {
        this.cambiarImagen = cambiarImagen;
    }

    /**
     * @param cambiarClave the cambiarClave to set
     */
    public void setCambiarClave(boolean cambiarClave) {
        this.cambiarClave = cambiarClave;
    }

    /**
     * @return the cboCargo
     */
    public javax.swing.JComboBox getCboCargo() {
        return cboCargo;
    }

    /**
     * @param cboCargo the cboCargo to set
     */
    public void setCboCargo(javax.swing.JComboBox cboCargo) {
        this.cboCargo = cboCargo;
    }


    /**
     * @return the cboSexo
     */
    public javax.swing.JComboBox getCboSexo() {
        return cboSexo;
    }

    /**
     * @param cboSexo the cboSexo to set
     */
    public void setCboSexo(javax.swing.JComboBox cboSexo) {
        this.cboSexo = cboSexo;
    }

    /**
     * @return the lblAreaInteres
     */
    public javax.swing.JLabel getLblAreaInteres() {
        return lblAreaInteres;
    }

    /**
     * @param lblAreaInteres the lblAreaInteres to set
     */
    public void setLblAreaInteres(javax.swing.JLabel lblAreaInteres) {
        this.lblAreaInteres = lblAreaInteres;
    }

    /**
     * @return the lblCargo
     */
    public javax.swing.JLabel getLblCargo() {
        return lblCargo;
    }

    /**
     * @param lblCargo the lblCargo to set
     */
    public void setLblCargo(javax.swing.JLabel lblCargo) {
        this.lblCargo = lblCargo;
    }

    /**
     * @return the lblCedula
     */
    public javax.swing.JLabel getLblCedula() {
        return lblCedula;
    }

    /**
     * @param lblCedula the lblCedula to set
     */
    public void setLblCedula(javax.swing.JLabel lblCedula) {
        this.lblCedula = lblCedula;
    }

    /**
     * @return the lblClave1
     */
    public javax.swing.JLabel getLblClave1() {
        return lblClave1;
    }

    /**
     * @param lblClave1 the lblClave1 to set
     */
    public void setLblClave1(javax.swing.JLabel lblClave1) {
        this.lblClave1 = lblClave1;
    }

    /**
     * @return the lblClave2
     */
    public javax.swing.JLabel getLblClave2() {
        return lblClave2;
    }

    /**
     * @param lblClave2 the lblClave2 to set
     */
    public void setLblClave2(javax.swing.JLabel lblClave2) {
        this.lblClave2 = lblClave2;
    }


    /**
     * @return the lblDisponibilidad
     */
    public javax.swing.JLabel getLblDisponibilidad() {
        return lblDisponibilidad;
    }

    /**
     * @param lblDisponibilidad the lblDisponibilidad to set
     */
    public void setLblDisponibilidad(javax.swing.JLabel lblDisponibilidad) {
        this.lblDisponibilidad = lblDisponibilidad;
    }

    /**
     * @return the lblSexo
     */
    public javax.swing.JLabel getLblSexo() {
        return lblSexo;
    }

    /**
     * @param lblSexo the lblSexo to set
     */
    public void setLblSexo(javax.swing.JLabel lblSexo) {
        this.lblSexo = lblSexo;
    }

    /**
     * @return the lblTelefono
     */
    public javax.swing.JLabel getLblTelefono() {
        return lblTelefono;
    }

    /**
     * @param lblTelefono the lblTelefono to set
     */
    public void setLblTelefono(javax.swing.JLabel lblTelefono) {
        this.lblTelefono = lblTelefono;
    }

    /**
     * @return the txtAreaInteres
     */
    public javax.swing.JTextField getTxtAreaInteres() {
        return txtAreaInteres;
    }

    /**
     * @param txtAreaInteres the txtAreaInteres to set
     */
    public void setTxtAreaInteres(javax.swing.JTextField txtAreaInteres) {
        this.txtAreaInteres = txtAreaInteres;
    }

    /**
     * @return the txtCedula
     */
    public javax.swing.JTextField getTxtCedula() {
        return txtCedula;
    }

    /**
     * @param txtCedula the txtCedula to set
     */
    public void setTxtCedula(javax.swing.JTextField txtCedula) {
        this.txtCedula = txtCedula;
    }

  

    /**
     * @return the txtTelefono
     */
    public javax.swing.JTextField getTxtTelefono() {
        return txtTelefono;
    }

    /**
     * @param txtTelefono the txtTelefono to set
     */
    public void setTxtTelefono(javax.swing.JTextField txtTelefono) {
        this.txtTelefono = txtTelefono;
    }
}
