/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Conexiones.ConexionMYSQL;
import Esencial.Usuario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Clase que representa una ventana a través de la cual un usuario puede gestionar su cuenta o gestionar el inicio de una partida.
 * @author Stalin
 */
public class GenerarArticulo extends javax.swing.JFrame {
    
    public static Usuario usuarioActual;
    private Fondo  imagenFondo;
    public static String hostname="";
    public static String origen="";

    /**
     * Creates new form MenuSala
     */
    public GenerarArticulo() {
        imagenFondo = new Fondo("/Imagenes/fondoSala.jpg");
        
        
        
        initComponents();
        
        
        this.setSize(imagenFondo.getWidth(),imagenFondo.getHeight());
        
        fondo.add(imagenFondo);
        fondo.setOpaque(false);

        this.setLocationRelativeTo(null);
        if(origen.equals("proyecto")){
            cargarProyectos();
            lblAutor.setText("Proyecto:");
        }
        else{
            cboAutor.addItem(usuarioActual.getCedula());
            cboAutor.setSelectedItem(usuarioActual.getCedula());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        btnVolver = new javax.swing.JButton();
        lblNombre = new javax.swing.JLabel();
        lblArea = new javax.swing.JLabel();
        lblLink = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtArea = new javax.swing.JTextField();
        txtLink = new javax.swing.JTextField();
        lblAutor = new javax.swing.JLabel();
        cboAutor = new javax.swing.JComboBox();
        btnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fondo.setBackground(new java.awt.Color(0, 153, 0));

        btnVolver.setText("Volver");
        btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverMouseClicked(evt);
            }
        });
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        lblNombre.setText("Nombre:");

        lblArea.setText("Área:");

        lblLink.setText("Link:");

        lblAutor.setText("Autor:");

        btnGuardar.setText("Guardar");
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fondoLayout = new javax.swing.GroupLayout(fondo);
        fondo.setLayout(fondoLayout);
        fondoLayout.setHorizontalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(lblNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblArea)
                                    .addComponent(lblLink))
                                .addGap(18, 18, 18)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtArea)
                                    .addComponent(txtLink))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                        .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(fondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAutor)
                .addGap(18, 18, 18)
                .addComponent(cboAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fondoLayout.setVerticalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblArea)
                    .addComponent(txtArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLink)
                    .addComponent(txtLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAutor)
                    .addComponent(cboAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVolver)
                    .addComponent(btnGuardar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked

        String[] args=null;
        GestionarArticulos.hostname = this.hostname;
        GestionarArticulos.usuarioActual = this.usuarioActual;
        GestionarArticulos.main(args);
        this.dispose();
    }//GEN-LAST:event_btnVolverMouseClicked

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseClicked
        guardarArticulo();
    }//GEN-LAST:event_btnGuardarMouseClicked

    private boolean cargarProyectos(){
        
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        if(origen.equals("proyecto"))
            sentenciaSQL = "SELECT nombre FROM proyectos;";
           
        
        try {
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            while(RS.next()){
                cboAutor.addItem(RS.getString("nombre"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        return true;
    } 
    
    
    private boolean guardarArticulo(){
       
        String usuario;
        if(this.usuarioActual.getCargo().equalsIgnoreCase("Miembro"))
            usuario="miembro";
        else
            usuario="miembrogipar";
        
        String nombre,area,link,idMiembro="",idArticulo="",idProyecto="";
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bdgipar",usuario);
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        nombre=txtNombre.getText();
        area=txtArea.getText();
        link=txtLink.getText();
        
        
        
        if(txtNombre.getText().length()==0 || txtArea.getText().length()==0 || txtLink.getText().length()==0 )
            return false;
        
        
        if(origen.equals("proyecto")){
            if(cboAutor.getItemCount()<1){
                JOptionPane.showMessageDialog(this, "No hay proyectos registrados en el sistema");
                return false;
            }
        }
        
        sentenciaSQL = "INSERT INTO articulos(nombre,area,link) VALUES(?, ?, ?)";
        
        PreparedStatement PST;
        try {
            PST = conexion.prepareStatement(sentenciaSQL);
            PST.setString(1, nombre);
            PST.setString(2, area);
            PST.setString(3, link);
            
            if(PST.executeUpdate()<=0){
                JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar el articulo");
                return false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        sentenciaSQL = "SELECT idArticulo FROM articulos WHERE nombre='"+nombre+"';";
        
        try {
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next())
                idArticulo=RS.getString("idArticulo");
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
        Statement ST;
        ResultSet RS;
        
        
        if(origen.equals("autor")){
            
            sentenciaSQL = "SELECT idMiembro FROM miembros WHERE cedula='"+cboAutor.getSelectedItem()+"';";
        
            try {
                ST = conexion.createStatement();
                RS = ST.executeQuery(sentenciaSQL);

                if(RS.next())
                    idMiembro=RS.getString("idMiembro");

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
            
            
            sentenciaSQL = "INSERT INTO generaciones(idArticulo,idMiembro) VALUES(?,?)";
            
            try {
                PST = conexion.prepareStatement(sentenciaSQL);
                PST.setString(1, idArticulo);
                PST.setString(2, idMiembro);
                if(PST.executeUpdate()<=0){
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                    return false;
                }
                JOptionPane.showMessageDialog(this, "Artículo guardado satisfactoriamente");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
        }else{
            
            sentenciaSQL = "SELECT idProyecto FROM proyectos WHERE nombre='"+cboAutor.getSelectedItem()+"';";
        
            try {
                ST = conexion.createStatement();
                RS = ST.executeQuery(sentenciaSQL);

                if(RS.next())
                    idProyecto=RS.getString("idProyecto");

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
            
            sentenciaSQL = "INSERT INTO articulos_proyectos(idArticulo,idProyecto) VALUES(?,?)";
            
            try {
                PST = conexion.prepareStatement(sentenciaSQL);
                PST.setString(1, idArticulo);
                PST.setString(2, idProyecto);
                if(PST.executeUpdate()<=0){
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                    return false;
                }
                JOptionPane.showMessageDialog(this, "Artículo guardado satisfactoriamente");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                return false;
            }
        
        
        }
        
        
        
        
       
            
        
        
        return true;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerarArticulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerarArticulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerarArticulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerarArticulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerarArticulo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox cboAutor;
    private javax.swing.JPanel fondo;
    private javax.swing.JLabel lblArea;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblLink;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTextField txtArea;
    private javax.swing.JTextField txtLink;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    
}
